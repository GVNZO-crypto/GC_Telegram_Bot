from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
import os, time, logging

from keyboards import start_button
from database import cursor

load_dotenv('.env')

bot = Bot(token=str(os.environ.get('token')))
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE ID = ?", (user_id,))
    result = cursor.fetchall()
    print(result)
    if not result:
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        username = message.from_user.username
        cursor.execute("INSERT INTO users (First_name, Last_name, Username, ID) VALUES (?, ?, ?, ?)",
                       (first_name, last_name, username, user_id))
        cursor.connection.commit()
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ GVNZO_Food! üõµ\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –º–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –ë–æ—Ç–∞ üëá", reply_markup=start_button)


@dp.message_handler(content_types=types.ContentType.CONTACT)
async def process_contact(message: types.Message):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number
    cursor.execute("UPDATE users SET Phone_number=? WHERE ID=?", (phone_number, user_id))
    cursor.connection.commit()
    await message.answer("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!",reply_markup=start_button)


@dp.message_handler(content_types=types.ContentType.LOCATION)
async def process_location(message: types.Message):
    user_id = message.from_user.id
    address_longitude = message.location.longitude
    address_latitude = message.location.latitude
    cursor.execute("INSERT INTO address (ID, Address_longitude, Address_latitude) VALUES (?, ?, ?)",
                   (user_id, address_longitude, address_latitude))
    cursor.connection.commit()
    await message.answer("–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!",reply_markup=start_button)


@dp.message_handler(text='–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É üöÄ')
async def order_food(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:\n 1. –ü–æ–¥–∂–∞—Ä–∏—Å—Ç—ã–π Python ü•©\n 2. –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π Java–≥—Ä–∏–ª—å üçó\n 3. Fullstack –ì–∞–º–±—É—Ä–≥–µ—Ä üçî\n 4. UX –ø–∏—Ü—Ü–∞ —Å UI –¥–∏–∑–∞–π–Ω–æ–º üçï")
    dp.register_message_handler(process_order_message)
async def process_order_message(message: types.Message):
    user_id = message.from_user.id
    title = message.text
    date_time_order = time.strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute("INSERT INTO orders (ID, Title, Address_destination, Date_time_order) "
                   "VALUES (?, ?, ?, ?)", (user_id, title, "–≥.–û—à, —É–ª.–ú—ã—Ä–∑–∞–ª—ã –ê–º–∞—Ç–æ–≤–∞, 1–ë —Å—Ç—Ä, –ë–¶ ‚Äú–¢–æ–º–∏—Ä–∏—Å‚Äù", date_time_order))
    cursor.connection.commit()
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

executor.start_polling(dp, skip_updates=True)

#Coding by GVNZO